name: Release CI

on:
  push:
    tags:
      - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10

jobs:
  build-dev-utils:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - build: linux
            os: ubuntu-latest
            arch: x86_64
            target: x86_64-unknown-linux-gnu
          - build: macos
            os: macos-latest
            arch: x86_64
            target: x86_64-apple-darwin
          - build: macos
            os: macos-latest
            arch: aarch64
            target: aarch64-apple-darwin
          # - build: windows
          #   os: windows-latest
          #   arch: x86_64
          #   target: x86_64-pc-windows-msvc

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 1

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        id: pnpm-install
        with:
          version: 8
          run_install: false

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Install deps
        run: pnpm install --no-frozen-lockfile

      - name: 'Setup Rust'
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}
      - uses: Swatinem/rust-cache@v2
        with:
          key: ${{ matrix.target }}

      - name: Install dependencies (ubuntu only)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf libx11-dev libxdo-dev libxcb-shape0-dev libxcb-xfixes0-dev
          sudo apt-get install -y libunwind-dev libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev libgstreamer-plugins-bad1.0-dev gstreamer1.0-plugins-base gstreamer1.0-plugins-good gstreamer1.0-plugins-bad gstreamer1.0-plugins-ugly gstreamer1.0-libav gstreamer1.0-tools gstreamer1.0-x gstreamer1.0-alsa gstreamer1.0-gl gstreamer1.0-gtk3 gstreamer1.0-qt5 gstreamer1.0-pulseaudio

      - name: Build FE
        run: pnpm run build:fe

      - name: Install rust target
        run: rustup target add ${{ matrix.target }}

      - run: pnpm run build --target ${{ matrix.target }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}

      - uses: actions/upload-artifact@v3
        if: matrix.os == 'ubuntu-latest'
        with:
          name: artifacts-${{ matrix.arch }}
          path: |
            ./src-tauri/target/${{ matrix.target }}/release/bundle/appimage/**.AppImage.*
            ./src-tauri/target/${{ matrix.target }}/release/bundle/deb/**.deb
      - uses: actions/upload-artifact@v3
        if: matrix.os == 'macos-latest'
        with:
          name: artifacts-${{ matrix.arch }}
          path: |
            ./src-tauri/target/${{ matrix.target }}/release/bundle/dmg/**.dmg
            ./src-tauri/target/${{ matrix.target }}/release/bundle/macos/**.app.*
      - uses: actions/upload-artifact@v3
        if: matrix.os == 'windows-latest'
        with:
          name: artifacts-${{ matrix.arch }}
          path: |
            ./src-tauri/target/${{ matrix.target }}/release/bundle/msi/**
  release-dev-utils:
    needs: build-dev-utils
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Query version number
        run: echo "version=${GITHUB_REF:11}" >> $GITHUB_ENV

      - name: Download x86_64 artifacts
        uses: actions/download-artifact@v3
        with:
          name: artifacts-x86_64
          path: artifacts/x86_64

      - name: Download aarch64 artifacts
        uses: actions/download-artifact@v3
        with:
          name: artifacts-aarch64
          path: artifacts/aarch64

      - name: Rename artifacts
        run: |
          mv "artifacts/aarch64/dmg/DevUtils_${{ env.version }}_aarch64.dmg" "artifacts/DevUtils_${{ env.version }}_macos_aarch64.dmg"
          mv "artifacts/aarch64/macos/DevUtils.app.tar.gz" "artifacts/DevUtils_${{ env.version }}_macos_aarch64.app.tar.gz"
          mv "artifacts/aarch64/macos/DevUtils.app.tar.gz.sig" "artifacts/DevUtils_${{ env.version }}_macos_aarch64.app.tar.gz.sig"
          mv "artifacts/x86_64/dmg/DevUtils_${{ env.version }}_x64.dmg" "artifacts/DevUtils_${{ env.version }}_macos_x86_64.dmg"
          mv "artifacts/x86_64/macos/DevUtils.app.tar.gz" "artifacts/DevUtils_${{ env.version }}_macos_x86_64.app.tar.gz"
          mv "artifacts/x86_64/macos/DevUtils.app.tar.gz.sig" "artifacts/DevUtils_${{ env.version }}_macos_x86_64.app.tar.gz.sig"
          mv "artifacts/x86_64/deb/dev-utils_${{ env.version }}_amd64.deb" "artifacts/x86_64/deb/DevUtils_${{ env.version }}_linux_x86_64.deb"
          mv "artifacts/x86_64/appimage/dev-utils_${{ env.version }}_amd64.AppImage.tar.gz" "artifacts/DevUtils_${{ env.version }}_linux_x86_64.AppImage.tar.gz"
          mv "artifacts/x86_64/appimage/dev-utils_${{ env.version }}_amd64.AppImage.tar.gz.sig" "artifacts/DevUtils_${{ env.version }}_linux_x86_64.AppImage.tar.gz.sig"
      - name: Create Release
        uses: softprops/action-gh-release@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ env.version }}
          name: Dev Utils v${{ env.version }}
          body: See the assets to download this version and install.
          prerelease: false
          generate_release_notes: false
          files: ./artifacts/**/*

  updater:
    runs-on: ubuntu-latest
    needs: release-dev-utils

    steps:
      - uses: actions/checkout@v3

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        id: pnpm-install
        with:
          version: 8
          run_install: false

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Install deps
        run: pnpm install --no-frozen-lockfile

      - name: Updater JSON
        run: pnpm run updater --token=${{ secrets.GITHUB_TOKEN }}

      - name: Deploy install.json
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./updater
          # force_orphan: true

      - name: Query version number
        run: echo "version=${GITHUB_REF:11}" >> $GITHUB_ENV